// Generated by CoffeeScript 1.10.0
(function() {
  var alt, csv, es, exec, fs, level, request, through, tmp;

  exec = require('child_process').exec;

  csv = require('csv-streamify');

  request = require('request');

  through = require('through2');

  es = require('event-stream');

  level = require('level');

  fs = require('fs');

  alt = level("./data/alt");

  tmp = level("./data/tmp", {
    valueEncoding: 'json'
  });

  module.exports = {
    "import": function() {
      return exec("rm -r data/geoip", function(err, out) {
        var geoip;
        geoip = level("./data/geoip", {
          keyEncoding: require("bytewise")
        });
        console.log(" deleted geoip db");
        return fs.createReadStream("geoip.csv").pipe(csv({
          delimiter: ",",
          objectMode: true
        })).pipe(through.obj(function(d, enc, next) {
          return tmp.get("id:" + d[4], function(err, n) {
            if (n) {
              console.log("FOUND geoname id " + d[4] + " :: " + n + "   for IP range " + d[0] + "-" + d[1] + "  (" + d[2] + "-" + d[3] + ")");
              geoip.put(parseInt(d[2]), n);
              return geoip.put(parseInt(d[3] + 1), null, next);
            } else {
              return next();
            }
          });
        }));
      });
    },
    resolve: function(ip, cb) {
      var geoip, i, s;
      s = ip.split(".");
      i = 0;
      i += parseInt(s[0]) * 256 * 256 * 256;
      i += parseInt(s[1]) * 256 * 256;
      i += parseInt(s[2]) * 256;
      i += parseInt(s[3]);
      console.log("get " + ip + "   " + i);
      geoip = level("./data/geoip", {
        keyEncoding: require("bytewise")
      });
      return geoip.createReadStream({
        lte: i,
        reverse: true,
        limit: 1
      }).pipe(through.obj(function(d, enc, next) {
        return cb(d != null ? d.value : void 0);
      }));
    }
  };

}).call(this);
